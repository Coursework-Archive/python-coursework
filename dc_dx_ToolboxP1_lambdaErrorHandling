# #Lambda functions
# raise_to_power = lambda x, y: x ** y
#
# raise_to_power(2, 3)
# #8
#
# # Define echo_word as a lambda function: echo_word
# echo_word = (lambda word1, echo: word1 * echo)
#
# # Call echo_word: result
# result = echo_word('hey', 5)
#
# # Print result
# print(result)
#
# #Anonymous functions
# # map(fun, seq)
# # map() applies the function to ALL elements in the sequence. Lambda functions
# # can be passed to map() - in this case we refer to them as anonymous functions
# #
#
# nums = [48, 6, 9, 21, 1]
# square_all = map(lambda num: num ** 2, nums)
# print(square_all)
# #output< map object at 0x103e065c0
#
# print(list(square_all))
# #output< [2304, 36, 81, 441, 1]
#
# # Create a list of strings: spells
# spells = ["protego", "accio", "expecto patronum", "legilimens"]
#
# # Use map() to apply a lambda function over spells: shout_spells
# shout_spells = map(lambda item: item + '!!!', spells)
#
# # Convert shout_spells to a list: shout_spells_list
# shout_spells_list = list(shout_spells)
#
# # Print the result
# print(shout_spells_list)
#
# # Create a list of strings: fellowship
# fellowship = ['frodo', 'samwise', 'merry', 'pippin', 'aragorn', 'boromir', 'legolas', 'gimli', 'gandalf']
#
# # Use filter() to apply a lambda function over fellowship: result
# result = filter(lambda member: len(member) > 6, fellowship)
#
# # Convert result to a list: result_list
# result_list = list(result)
#
# # Print result_list
# print(result_list)
#
# #output<     ['samwise', 'aragorn', 'boromir', 'legolas', 'gandalf']
#
#
# # Import reduce from functools
# from functools import reduce
#
# # Create a list of strings: stark
# stark = ['robb', 'sansa', 'arya', 'brandon', 'rickon']
#
# # Use reduce() to apply a lambda function over stark: result
# result = reduce(lambda item1, item2: item1 + item2, stark)
#
# # Print the result
# print(result)

#output< robbsansaaryabrandonrickon

#Error handling  an exceptions
# def sqrt(x):
#     #Returns the square root of a number
#     try:
#         return x ** 0.5
#     except:
#         print('x must be an int or float')
#
# sqrt(4)


#Catching Typerrors
def sqrt(x):
    try:
        return x ** 0.5
    except TypeError:
        print('x must be an int of float')


    def sqrt(x):
        if x < 0:
            raise ValueError('x must be non-negative')
        try:
            retur x ** 0.5
        except TypeError:
            print('x must be int or float')


# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Initialize empty strings: echo_word, shout_words
    echo_word, shout_words = '', ''

    # Add exception handling with try-except
    try:
        # Concatenate echo copies of word1 using *: echo_word
        echo_word = echo * word1

        # Concatenate '!!!' to echo_word: shout_words
        shout_words = echo_word + '!!!'
    except:
        # Print error message
        print("word1 must be a string and echo must be an integer.")

    # Return shout_words
    return shout_words


# Call shout_echo
shout_echo("particle", echo="accelerator")

# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Raise an error with raise
    if echo < 0:
        raise ValueError('echo must be greater than or equal to 0')

    # Concatenate echo copies of word1 using *: echo_word
    echo_word = word1 * echo

    # Concatenate '!!!' to echo_word: shout_word
    shout_word = echo_word + '!!!'

    # Return shout_word
    return shout_word

# Call shout_echo
shout_echo("particle", echo=10)

#output< 'particleparticleparticleparticleparticleparticleparticleparticleparticleparticle!!!'

# Select retweets from the Twitter DataFrame: result
result = filter(lambda x: x[0:2] == 'RT' , tweets_df['text'])

# Create list from filter object result: res_list
res_list = list(result)

# Print all retweets in res_list
for tweet in res_list:
    print(tweet)


# Define count_entries()
def count_entries(df, col_name='lang'):
    """Return a dictionary with counts of
    occurrences as value for each key."""

    # Initialize an empty dictionary: cols_count
    cols_count = {}

    # Add try block
    try:
        # Extract column from DataFrame: col
        col = df[col_name]

        # Iterate over the column in dataframe
        for entry in col:

            # If entry is in cols_count, add 1
            if entry in cols_count.keys():
                cols_count[entry] += 1
            # Else add the entry to cols_count, set the value to 1
            else:
                cols_count[entry] = 1

        # Return the cols_count dictionary
        return cols_count

    # Add except block
    except:
        print('The DataFrame does not have a ' + col_name + 'column')


# Call count_entries(): result1
result1 = count_entries(tweets_df, 'lang')

# Print result1
print(result1)
